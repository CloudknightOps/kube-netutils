name: Build, Scan and Push kube-netutils Image

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
      latest-tag: ${{ steps.set-tag.outputs.latest-tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Timestamp Tag
        id: set-tag
        run: |
          TAG=$(date +'%Y%m%d.%H%M')
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/secure-nettools
          echo "image-tag=${IMAGE}:${TAG}" >> "$GITHUB_OUTPUT"
          echo "latest-tag=${IMAGE}:latest" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image (tagged with timestamp and latest)
        run: |
          docker build -t ${{ steps.set-tag.outputs.image-tag }} -t ${{ steps.set-tag.outputs.latest-tag }} .

  scan:
    name: Scan Image with Trivy
    runs-on: ubuntu-latest
    needs: build
    outputs:
      passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: table
          exit-code: 1
          ignore-unfixed: true

      - name: Set Pass Status
        id: check
        run: echo "passed=true" >> "$GITHUB_OUTPUT"

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: needs.scan.outputs.passed == 'true'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Both Image Tags (timestamp + latest)
        run: |
          docker push ${{ needs.build.outputs.image-tag }}
          docker push ${{ needs.build.outputs.latest-tag }}
